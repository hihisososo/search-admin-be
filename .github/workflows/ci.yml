name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Code formatting check
        run: ./gradlew spotlessCheck
      
      - name: Build application
        run: ./gradlew bootJar
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar
          retention-days: 1

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy via SSM
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}
          
          # 배포 명령 전송
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_IDS }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["set -e","cd /home/ec2-user","if [ ! -d search-admin-be ]; then git clone https://github.com/${{ github.repository }}.git search-admin-be; fi","cd search-admin-be","git pull origin main","chmod +x ./gradlew","./gradlew clean bootJar","docker build -t search-admin-be:'$VERSION' .","docker compose down","docker compose up -d","sleep 20","curl -f http://localhost:8080/actuator/health || exit 1"]}' \
            --timeout-seconds 900 \
            --output text --query "Command.CommandId")
          
          echo "Deployment started (ID: $COMMAND_ID)"

          
          # 배포 상태 모니터링
          for i in {1..180}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id "${{ secrets.EC2_INSTANCE_IDS }}" \
              --query "Status" --output text 2>/dev/null || echo "Pending")
            
            case $STATUS in
              Success) 
                echo "✅ Deployment successful!"
                exit 0 ;;
              Failed|Cancelled|TimedOut) 
                echo "❌ Deployment failed: $STATUS"
                aws ssm get-command-invocation \
                  --command-id $COMMAND_ID \
                  --instance-id "${{ secrets.EC2_INSTANCE_IDS }}" \
                  --query "StandardErrorContent" --output text
                exit 1 ;;
            esac
            
            [ $((i % 12)) -eq 0 ] && echo "⏳ Still deploying... ($((i/12)) minutes)"
            sleep 5
          done
          
          echo "❌ Deployment timeout (15 minutes)"
          exit 1