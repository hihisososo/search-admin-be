name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Code formatting check
        run: ./gradlew spotlessCheck
      
      - name: Build application
        run: ./gradlew bootJar
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar
          retention-days: 1

  deploy:
    name: Deploy
    needs: build 
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy via SSM
        run: |
          INSTANCE_IDS="${{ secrets.EC2_INSTANCE_IDS }}"
          VERSION=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}
          
          # 배포 스크립트 실행
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_IDS \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application version $VERSION" \
            --timeout-seconds 900 \
            --parameters commands="[\"
              set -e
              
              # Git 저장소 확인 및 처리
              if [ ! -d "/home/ec2-user/search-admin-be/.git" ]; then
                echo 'Repository not found. Cloning...'
                cd /home/ec2-user
                rm -rf search-admin-be
                git clone https://github.com/${{ github.repository }}.git search-admin-be
                cd search-admin-be
              else
                echo 'Repository found. Pulling latest code...'
                cd /home/ec2-user/search-admin-be
                git fetch origin main
                git checkout main
                git pull origin main
              fi
              
              # 현재 JAR 백업
              if [ -f build/libs/*.jar ]; then
                echo 'Backing up current JAR...'
                mkdir -p backups
                cp build/libs/*.jar backups/app-$(date +%Y%m%d%H%M%S).jar || true
              fi
              
              # Gradle 빌드
              echo 'Building application...'
              ./gradlew clean bootJar
              
              # JAR 파일을 app.jar로 복사
              echo 'Copying JAR file...'
              cp build/libs/*.jar app.jar
              
              # Docker 이미지 빌드 및 재시작
              echo 'Building Docker image...'
              docker build -t search-admin-be:$VERSION -t search-admin-be:latest .
              
              echo 'Restarting Docker containers...'
              docker compose down
              docker compose up -d
              
              # 헬스체크
              echo 'Performing health check...'
              sleep 15
              for i in {1..30}; do
                if curl -f -s http://localhost:8080/actuator/health > /dev/null; then
                  echo 'Health check passed!'
                  
                  # 오래된 백업 정리 (7일 이상)
                  find backups -type f -mtime +7 -delete 2>/dev/null || true
                  
                  exit 0
                fi
                echo 'Waiting for health check...'
                sleep 2
              done
              
              echo 'Health check failed!'
              exit 1
            \"]" \
            --output text --query "Command.CommandId")
          
          echo "Command ID: $COMMAND_ID"
          
          # 명령 실행 대기 및 결과 확인
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_IDS \
            || true
          
          # 실행 결과 확인
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_IDS \
            --query "Status" --output text)
          
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_IDS \
              --query "StandardErrorContent" --output text
            exit 1
          fi
          
          echo "Deployment successful!"