plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
}

group = 'com.yjlee'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

spotless {
	java {
		googleJavaFormat('1.19.2')
		target 'src/**/*.java'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	implementation 'co.elastic.clients:elasticsearch-java:8.18.3'

	implementation platform('software.amazon.awssdk:bom:2.28.17')
	implementation 'software.amazon.awssdk:s3'
	implementation 'software.amazon.awssdk:ssm'
	implementation 'software.amazon.awssdk:url-connection-client'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.testcontainers:testcontainers:1.20.4'
	testImplementation 'org.testcontainers:elasticsearch:1.20.4'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	systemProperty 'file.encoding', 'UTF-8'
	jvmArgs '-Dfile.encoding=UTF-8'
}

// 단위 테스트만 실행
task unitTest(type: Test) {
	useJUnitPlatform {
		includeTags 'unit'
	}
	testLogging {
		events "passed", "skipped", "failed"
	}
	systemProperty 'file.encoding', 'UTF-8'
	jvmArgs '-Dfile.encoding=UTF-8'
}

// 통합 테스트만 실행
task integrationTest(type: Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
	testLogging {
		events "passed", "skipped", "failed"
	}
	systemProperty 'file.encoding', 'UTF-8'
	jvmArgs '-Dfile.encoding=UTF-8'
}

// E2E 테스트만 실행
task e2eTest(type: Test) {
	useJUnitPlatform {
		includeTags 'e2e'
	}
	testLogging {
		events "passed", "skipped", "failed"
	}
	systemProperty 'file.encoding', 'UTF-8'
	jvmArgs '-Dfile.encoding=UTF-8'
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/model/**',
                '**/exception/**',
                '**/*Application.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.60
            }
        }
    }
}
