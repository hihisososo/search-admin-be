plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
}

group = 'com.yjlee'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

bootRun {
  jvmArgs = [
    '-Dfile.encoding=UTF-8'
  ]
}

spotless {
	java {
		googleJavaFormat('1.19.2')
		target 'src/**/*.java'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	implementation 'co.elastic.clients:elasticsearch-java:8.18.3'
	implementation 'org.elasticsearch.client:elasticsearch-rest-client:8.18.3'

	implementation platform('software.amazon.awssdk:bom:2.28.17')
	implementation 'software.amazon.awssdk:ssm'
	implementation 'software.amazon.awssdk:url-connection-client'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'co.elastic.apm:apm-agent-api:1.49.0'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task startTestES(type: Exec) {
	commandLine 'docker', 'compose', '-f', 'infra/docker-compose.yml', 'up', '-d', 'elasticsearch-local'
	ignoreExitValue = true
	doLast {
		println 'Waiting for Elasticsearch...'
		def attempts = 0
		while (attempts++ < 60) {
			try {
				new URL('http://localhost:9200/_cluster/health').text
				println 'Elasticsearch is ready!'
				break
			} catch (ignored) {
				Thread.sleep(1000)
			}
		}
	}
}

task stopTestES(type: Exec) {
	commandLine 'docker', 'compose', '-f', 'infra/docker-compose.yml', 'down'
	doLast {
		println 'Test ES container stopped'
	}
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	include '**/*IntegrationTest.class'
	dependsOn startTestES
	finalizedBy stopTestES

	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		showStandardStreams = true
		exceptionFormat = "full"
		showCauses = true
		showExceptions = true
		showStackTraces = true
	}
}

test {
	useJUnitPlatform()
	exclude '**/*IntegrationTest.class'
}
